#!/usr/bin/env python3

import time
import calendar

def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            yield i
    if n > 1: yield n

OPGAVE = [
( 1040519640, 6 ), ( 1072076640, 9 ), ( 1103632920, 9 ), ( 1135190100, 7 ), ( 1166746920, 7 ),
( 1198303680, 11 ), ( 1229861040, 8 ), ( 1261417620, 6 ), ( 1292974680, 7 ), ( 1324531800, 9 ),
( 1356088260, 6 ), ( 1387645860, 7 ), ( 1419202980, 7 ), ( 1450759680, 15 ), ( 1482317040, 8 ),
( 1513873680, 8 ), ( 1545430980, 6 ), ( 1576988340, 7 )
]

# Every `a` is the time of the solstice ('winterwende'),
# in seconds since the UNIX epoch (Jan 1, 1970 00:00 AM GMT),
# from 2002 to 2019.
# Every `b` is the number of prime factors in `a`.

# This is the solution, the entry for 2020, according to https://nl.wikipedia.org/wiki/Equinox :
a = calendar.timegm(time.strptime('2020-12-21 10:02:00 GMT', '%Y-%m-%d %H:%M:%S %Z'))
b = len(list(prime_factors(a)))

SOLUTION = [(a,b)]

for a,b in OPGAVE + SOLUTION:
    factors = list(prime_factors(a))
    assert len(factors) == b
    print('(', a, ',', '%2d' % b, ')', time.strftime('%Y-%m-%d %H:%M:%S %Z', time.gmtime(a)), factors)

# The solution is the last printed entry:
# ( 1608544920 ,  8 )
