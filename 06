#!/usr/bin/env python3

"""
The top image in this problem is to be interpreted as follows,
reading row by row, left to right:
    - red: vowel
    - blue: consonant
    - green: space

The subtitle gives, for every letter that occurs,
the number of occurrences in Roman numerals.

So there are 163 red, 255 blue, and 91 green triangles, so:
    * 92 words
    * 163 vowels (AEIOU)
    * 255 consonants (BCDFGHJKLMNPRSTVWZ)
"""

import subprocess
import PIL.Image
from collections import Counter

# The image is a screenshot I took of the rendered PDF,
# 999x816 true aspect ratio (squares are square),
# 30 triangles wide, top part = 17 rows, bottom part = 4 rows.
IMAGE = PIL.Image.open('06-image.png')
(_, _, WIDTH, HEIGHT) = IMAGE.getbbox()
def color_at(px, py):
    """
    Returns 'r', 'g', 'b', or ' ' (or crashes if confused).
    0 <= x < 30 and (-4 <= y < 0 or 0 <= y < 17) # origin at top left
    """
    global IMAGE
    psize = WIDTH/30
    origin = (psize/2, psize/2 + (py < 0)*HEIGHT) # center of (0,0) pixel
    x,y = origin[0] + px*psize, origin[1] + py*psize # center of (px,py) pixel
    # sample psize/4 in all compass directions around x,y
    guess = ' '
    for dx,dy in [(1,0),(0,1),(-1,0),(0,-1)]:
        r,g,b,_ = IMAGE.getpixel((x+dx*psize/4,y+dy*psize/4))
        c = None
        if r>127 and g<128 and b<128: c = 'r'
        if r<128 and g>127 and b<128: c = 'g'
        if r<128 and g<128 and b>127: c = 'b'
        if r>127 and g>127 and b>127: c = ' '
        if not c: assert False, (px,py,x,y,dx,dy,r,g,b,c,guess)
        assert guess == c or guess == ' ' or c == ' ', (px,py,x,y,dx,dy,r,g,b,c,guess)
        if c != ' ': guess = c
    assert guess, (px,py,x,y)
    return guess

assert color_at(0,0) == 'r'
assert color_at(1,1) == 'b'
assert color_at(29,-4) == 'g'

##--##--##

# The text-with-roman-numerals contains the following (hand-decoded):
FREQUENCIES = [44,5,7,33,56,3,10,13,27,6,6,20,9,35,32,4,0,18,22,37,4,13,5,0,0,9]
assert len(FREQUENCIES) == 26
assert sum(FREQUENCIES) == 163 + 255

##--##--##

TR_WORDS = ['']
for y in range(17):
    for x in range(30):
        c = color_at(x,y)
        # sanity check at the end
        if c == ' ': assert y == 16 and x == 29
        elif c == 'g': TR_WORDS += ['']
        else: TR_WORDS[-1] += c
assert len(TR_WORDS) == 92
assert ''.join(TR_WORDS).count('r') == 163
assert ''.join(TR_WORDS).count('b') == 255

##--##--##

def candidates(tr_word):
    regex = r'^' + r''.join(r'[AEIOU]' if c == 'r' else r'[BCDFGHJKLMNPRSTVWZ]' for c in tr_word) + r'$'
    return subprocess.check_output(['grep', '-i', '-P', regex, '/usr/share/dict/nederlands']).decode('utf-8').splitlines();

def sorted_candidates(tr_words):
    candict = {}
    for tr_word in set(tr_words):
        candict[tr_word] = candidates(tr_word)
    return sorted(candict.items(), key=lambda x: len(x[1]), reverse=True)

def print_sorted_candidates(description, tr_words):
    for tr_word, cands in sorted_candidates(tr_words):
        print(tr_word, cands)
        print()
    print(description, ' '.join(tr_words))
    print()

##--##--##

print_sorted_candidates('Plaatje:', TR_WORDS)

# Quote from Spinoza (source not yet known) which seems to fit quite well,
# but not completely.
# 
# (Puzzle image seems to have "als ... bestaande", so with an additional 'brb' word.
# Puzzle has 19 more words after this quote.)
# 
# Found this searching Dutch quotation sites for dictionary words matching 'rrbbbrrbrbb'
# and finding this one for 'uitsluitend', with the required surrounding 'brbb ... brrb' words.
ATTEMPT = 'Aan hen die vragen waarom de mensen niet allen zodanig geschapen zijn, dat zij zich uitsluitend door de rede laten leiden antwoord ik slechts dit: omdat in het Zijn voldoende stof aanwezig is om alles, van de hoogste tot de laagste trap van volmaaktheid, voort te brengen of, om nog duidelijker te spreken, omdat het Zijn als oorzaak zo alles omvattend is, dat het alles, wat als bestaande gedacht kan worden, voortbrengt.'

TR_WORDS_ATTEMPT = ['']
for c in map(str.upper, ATTEMPT):
    if c in 'AEIOU': TR_WORDS_ATTEMPT[-1] += 'r'
    elif 'A' <= c <= 'Z': TR_WORDS_ATTEMPT[-1] += 'b'
    elif TR_WORDS_ATTEMPT[-1] != '': TR_WORDS_ATTEMPT += [''] # start new word
while TR_WORDS_ATTEMPT[-1] == '': TR_WORDS_ATTEMPT = TR_WORDS_ATTEMPT[:-1]
print('Poging: ', ' '.join(TR_WORDS_ATTEMPT));
print()

##--##

# When we take TR_WORDS as calculated above,
# and remove the parts matching TR_WORDS_ATTEMPT,
# this is what is left
# (the first 'brb' word between "als ... bestaande",
# the rest at the very end).
#   Yes, this could have been automated.  I didn't bother.
MISSING_FROM_ATTEMPT='brb br brrb brb br bbbbrbbrb brb brb brbrrb rb br bbrrbrb brrb br brbb brb br brrbbbbrb rb brbrb'

print_sorted_candidates('Over:   ', MISSING_FROM_ATTEMPT.split())

available_letters = Counter({chr(ord('A')+i):n for i,n in enumerate(FREQUENCIES)})
used_letters = Counter(ATTEMPT.upper())
available_letters.subtract(used_letters)
print('Letters:', {l:n for l,n in sorted(available_letters.items()) if 'A' <= l <= 'Z' and n != 0})

